name: release

on:
  release:
    types: [created]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive: tar.xz
            suffix: linux-x86_64
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
            archive: zip
            suffix: windows-x86_64
          - target: x86_64-apple-darwin
            os: macos-latest
            archive: tar.gz
            suffix: macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            archive: tar.gz
            suffix: macos-arm64

    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build binary
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Archive release binary
        run: |
          cd target/${{ matrix.target }}/release
          mkdir rustpass-${{ matrix.suffix }}
          cp rustpass ../../../../README.md ../../../../LICENSE rustpass-${{ matrix.suffix }} || true
          cd rustpass-${{ matrix.suffix }}

          if [[ "${{ matrix.archive }}" == "zip" ]]; then
            zip -r ../../rustpass-${{ matrix.suffix }}.zip ./*
          elif [[ "${{ matrix.archive }}" == "tar.gz" ]]; then
            tar -czf ../../rustpass-${{ matrix.suffix }}.tar.gz ./*
          elif [[ "${{ matrix.archive }}" == "tar.xz" ]]; then
            tar -cJf ../../rustpass-${{ matrix.suffix }}.tar.xz ./*
          fi
        shell: bash

      - name: Upload release archive
        uses: softprops/action-gh-release@v1
        with:
          files: rustpass-${{ matrix.suffix }}.${{ matrix.archive }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
